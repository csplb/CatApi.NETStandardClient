/*
 * CatApi
 *
 * This is a sample CatApi.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using CatApi.NETStandardClient.Client;
using CatApi.NETStandardClient.Model;

namespace CatApi.NETStandardClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICatApi : IApiAccessor
    {
        #region Synchronous Operations

        /// <summary>
        /// Get all cats in the system
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="global::CatApi.NETStandardClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Cat&gt;</returns>
        List<Cat> CatsGet();

        /// <summary>
        /// Get all cats in the system
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="global::CatApi.NETStandardClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Cat&gt;</returns>
        ApiResponse<List<Cat>> CatsGetWithHttpInfo();

        /// <summary>
        /// Find cat by ID
        /// </summary>
        /// <remarks>
        /// Returns a single cat
        /// </remarks>
        /// <exception cref="global::CatApi.NETStandardClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">ID of cat to return</param>
        /// <returns>Cat</returns>
        Cat GetCatById(string catId);

        /// <summary>
        /// Find cat by ID
        /// </summary>
        /// <remarks>
        /// Returns a single cat
        /// </remarks>
        /// <exception cref="global::CatApi.NETStandardClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">ID of cat to return</param>
        /// <returns>ApiResponse of Cat</returns>
        ApiResponse<Cat> GetCatByIdWithHttpInfo(string catId);

        /// <summary>
        /// Hate cat of a given id
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="global::CatApi.NETStandardClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">ID of cat to return</param>
        /// <returns></returns>
        void HateCatById(string catId);

        /// <summary>
        /// Hate cat of a given id
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="global::CatApi.NETStandardClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">ID of cat to return</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> HateCatByIdWithHttpInfo(string catId);

        /// <summary>
        /// Love cat of a given id
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="global::CatApi.NETStandardClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">ID of cat to return</param>
        /// <returns></returns>
        void LoveCatById(string catId);

        /// <summary>
        /// Love cat of a given id
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="global::CatApi.NETStandardClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">ID of cat to return</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LoveCatByIdWithHttpInfo(string catId);

        #endregion Synchronous Operations

        #region Asynchronous Operations

        /// <summary>
        /// Get all cats in the system
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="global::CatApi.NETStandardClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Cat&gt;</returns>
        System.Threading.Tasks.Task<List<Cat>> CatsGetAsync();

        /// <summary>
        /// Get all cats in the system
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="global::CatApi.NETStandardClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Cat&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Cat>>> CatsGetAsyncWithHttpInfo();

        /// <summary>
        /// Find cat by ID
        /// </summary>
        /// <remarks>
        /// Returns a single cat
        /// </remarks>
        /// <exception cref="global::CatApi.NETStandardClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">ID of cat to return</param>
        /// <returns>Task of Cat</returns>
        System.Threading.Tasks.Task<Cat> GetCatByIdAsync(string catId);

        /// <summary>
        /// Find cat by ID
        /// </summary>
        /// <remarks>
        /// Returns a single cat
        /// </remarks>
        /// <exception cref="global::CatApi.NETStandardClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">ID of cat to return</param>
        /// <returns>Task of ApiResponse (Cat)</returns>
        System.Threading.Tasks.Task<ApiResponse<Cat>> GetCatByIdAsyncWithHttpInfo(string catId);

        /// <summary>
        /// Hate cat of a given id
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="global::CatApi.NETStandardClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">ID of cat to return</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task HateCatByIdAsync(string catId);

        /// <summary>
        /// Hate cat of a given id
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="global::CatApi.NETStandardClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">ID of cat to return</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> HateCatByIdAsyncWithHttpInfo(string catId);

        /// <summary>
        /// Love cat of a given id
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="global::CatApi.NETStandardClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">ID of cat to return</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LoveCatByIdAsync(string catId);

        /// <summary>
        /// Love cat of a given id
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="global::CatApi.NETStandardClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">ID of cat to return</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LoveCatByIdAsyncWithHttpInfo(string catId);

        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CatApi : ICatApi
    {
        private global::CatApi.NETStandardClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CatApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CatApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = global::CatApi.NETStandardClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CatApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CatApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = global::CatApi.NETStandardClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public global::CatApi.NETStandardClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get all cats in the system
        /// </summary>
        /// <exception cref="global::CatApi.NETStandardClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Cat&gt;</returns>
        public List<Cat> CatsGet()
        {
            ApiResponse<List<Cat>> localVarResponse = CatsGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all cats in the system
        /// </summary>
        /// <exception cref="global::CatApi.NETStandardClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Cat&gt;</returns>
        public ApiResponse<List<Cat>> CatsGetWithHttpInfo()
        {
            var localVarPath = "/cats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CatsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Cat>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Cat>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Cat>)));
        }

        /// <summary>
        /// Get all cats in the system
        /// </summary>
        /// <exception cref="global::CatApi.NETStandardClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Cat&gt;</returns>
        public async System.Threading.Tasks.Task<List<Cat>> CatsGetAsync()
        {
            ApiResponse<List<Cat>> localVarResponse = await CatsGetAsyncWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all cats in the system
        /// </summary>
        /// <exception cref="global::CatApi.NETStandardClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Cat&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Cat>>> CatsGetAsyncWithHttpInfo()
        {
            var localVarPath = "/cats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CatsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Cat>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Cat>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Cat>)));
        }

        /// <summary>
        /// Find cat by ID Returns a single cat
        /// </summary>
        /// <exception cref="global::CatApi.NETStandardClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">ID of cat to return</param>
        /// <returns>Cat</returns>
        public Cat GetCatById(string catId)
        {
            ApiResponse<Cat> localVarResponse = GetCatByIdWithHttpInfo(catId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find cat by ID Returns a single cat
        /// </summary>
        /// <exception cref="global::CatApi.NETStandardClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">ID of cat to return</param>
        /// <returns>ApiResponse of Cat</returns>
        public ApiResponse<Cat> GetCatByIdWithHttpInfo(string catId)
        {
            // verify the required parameter 'catId' is set
            if (catId == null)
                throw new ApiException(400, "Missing required parameter 'catId' when calling CatApi->GetCatById");

            var localVarPath = "/cat/{catId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (catId != null) localVarPathParams.Add("catId", Configuration.ApiClient.ParameterToString(catId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCatById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Cat>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Cat)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Cat)));
        }

        /// <summary>
        /// Find cat by ID Returns a single cat
        /// </summary>
        /// <exception cref="global::CatApi.NETStandardClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">ID of cat to return</param>
        /// <returns>Task of Cat</returns>
        public async System.Threading.Tasks.Task<Cat> GetCatByIdAsync(string catId)
        {
            ApiResponse<Cat> localVarResponse = await GetCatByIdAsyncWithHttpInfo(catId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find cat by ID Returns a single cat
        /// </summary>
        /// <exception cref="global::CatApi.NETStandardClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">ID of cat to return</param>
        /// <returns>Task of ApiResponse (Cat)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Cat>> GetCatByIdAsyncWithHttpInfo(string catId)
        {
            // verify the required parameter 'catId' is set
            if (catId == null)
                throw new ApiException(400, "Missing required parameter 'catId' when calling CatApi->GetCatById");

            var localVarPath = "/cat/{catId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (catId != null) localVarPathParams.Add("catId", Configuration.ApiClient.ParameterToString(catId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCatById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Cat>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Cat)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Cat)));
        }

        /// <summary>
        /// Hate cat of a given id
        /// </summary>
        /// <exception cref="global::CatApi.NETStandardClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">ID of cat to return</param>
        /// <returns></returns>
        public void HateCatById(string catId)
        {
            HateCatByIdWithHttpInfo(catId);
        }

        /// <summary>
        /// Hate cat of a given id
        /// </summary>
        /// <exception cref="global::CatApi.NETStandardClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">ID of cat to return</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> HateCatByIdWithHttpInfo(string catId)
        {
            // verify the required parameter 'catId' is set
            if (catId == null)
                throw new ApiException(400, "Missing required parameter 'catId' when calling CatApi->HateCatById");

            var localVarPath = "/hate/{catId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (catId != null) localVarPathParams.Add("catId", Configuration.ApiClient.ParameterToString(catId)); // path parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HateCatById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Hate cat of a given id
        /// </summary>
        /// <exception cref="global::CatApi.NETStandardClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">ID of cat to return</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task HateCatByIdAsync(string catId)
        {
            await HateCatByIdAsyncWithHttpInfo(catId);
        }

        /// <summary>
        /// Hate cat of a given id
        /// </summary>
        /// <exception cref="global::CatApi.NETStandardClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">ID of cat to return</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> HateCatByIdAsyncWithHttpInfo(string catId)
        {
            // verify the required parameter 'catId' is set
            if (catId == null)
                throw new ApiException(400, "Missing required parameter 'catId' when calling CatApi->HateCatById");

            var localVarPath = "/hate/{catId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (catId != null) localVarPathParams.Add("catId", Configuration.ApiClient.ParameterToString(catId)); // path parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HateCatById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Love cat of a given id
        /// </summary>
        /// <exception cref="global::CatApi.NETStandardClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">ID of cat to return</param>
        /// <returns></returns>
        public void LoveCatById(string catId)
        {
            LoveCatByIdWithHttpInfo(catId);
        }

        /// <summary>
        /// Love cat of a given id
        /// </summary>
        /// <exception cref="global::CatApi.NETStandardClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">ID of cat to return</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> LoveCatByIdWithHttpInfo(string catId)
        {
            // verify the required parameter 'catId' is set
            if (catId == null)
                throw new ApiException(400, "Missing required parameter 'catId' when calling CatApi->LoveCatById");

            var localVarPath = "/love/{catId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (catId != null) localVarPathParams.Add("catId", Configuration.ApiClient.ParameterToString(catId)); // path parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoveCatById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Love cat of a given id
        /// </summary>
        /// <exception cref="global::CatApi.NETStandardClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">ID of cat to return</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LoveCatByIdAsync(string catId)
        {
            await LoveCatByIdAsyncWithHttpInfo(catId);
        }

        /// <summary>
        /// Love cat of a given id
        /// </summary>
        /// <exception cref="global::CatApi.NETStandardClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catId">ID of cat to return</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LoveCatByIdAsyncWithHttpInfo(string catId)
        {
            // verify the required parameter 'catId' is set
            if (catId == null)
                throw new ApiException(400, "Missing required parameter 'catId' when calling CatApi->LoveCatById");

            var localVarPath = "/love/{catId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (catId != null) localVarPathParams.Add("catId", Configuration.ApiClient.ParameterToString(catId)); // path parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoveCatById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }
    }
}